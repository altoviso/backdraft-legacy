(function() {

//#include bd/test/testHelpers
//#commentToString

var
  callCount,
  cbcallCount,
  arg1= {},
  arg2= {},
  arg3= {},
  item0= {},
  item1= {},
  item2= {},
  item3= {},
  itemLast= {},
  items= [item0, item1, item2, item3, itemLast],
  target,
  expected,
  forEachResult= [],
  undefinedCollection,
  emptyCollection= [],
  collection= [item1, item2, item2, item3, item3, item2, item2, itemLast],
  everyCollection= [item2, item2, item2, item2],
  mapResult= (function(){
    for (var result= [], i= 0; i<collection.length; i++) result.push([collection[i], i, collection]);
     return result;
  })(),
  filterResult= [item3, item3],
  doTimesResult= [],
  hash= {a:item1, b:item2, c:item2, d:item3},
  forEachHashResult= [item1, item2, item2, item3],
  mapHashResult= (function(){
    var result= [];
    for (var p in hash ) result.push([hash[p], p, hash]);
     return result;
  })(),
  
  predicate= function(item, index, collection) {
    callCount++;
    the(collection[index]).is(item);
    return item===target;
  },
  predicateWithArgs= function(a1, a2, a3, item, index, collection) {
    callCount++;
    the(a1).is(arg1);
    the(a2).is(arg2);
    the(a3).is(arg3);
    the(collection[index]).is(item);
    return item===target;
  },
  callback= function(item, index, collection) {
    cbcallCount++;
    the(collection[index]).is(item);
    forEachResult.push(item);
    return [item, index, collection];
  },
  callbackWithArgs= function(a1, a2, a3, item, index, collection) {
    cbcallCount++;
    the(a1).is(arg1);
    the(a2).is(arg2);
    the(a3).is(arg3);
    the(collection[index]).is(item);
    forEachResult.push(item);
    return [item, index, collection];
  },
  filterCallback= function(item, index, collection) {
    cbcallCount++;
    the(collection[index]).is(item);
    return item==item3;
  },
  filterCallbackWithArgs= function(a1, a2, a3, item, index, collection) {
    cbcallCount++;
    the(a1).is(arg1);
    the(a2).is(arg2);
    the(a3).is(arg3);
    the(collection[index]).is(item);
    return item==item3;
  },
  doTimesCallback= function(i) {
    doTimesResult.push(i);
  },
  doTimesCallbackWithArgs= function(a1, a2, a3, i) {
    the(a1).is(arg1);
    the(a2).is(arg2);
    the(a3).is(arg3);
    doTimesResult.push(i);
  },
  context= {
    predicate: function(item, index, collection) {
      callCount++;
      the(this).is(context);
      the(collection[index]).is(item);
      return item===target;
    },
    predicateWithArgs: function(a1, a2, a3, item, index, collection) {
      callCount++;
      the(this).is(context);
      the(a1).is(arg1);
      the(a2).is(arg2);
      the(a3).is(arg3);
      the(collection[index]).is(item);
      return item===target;
    },
    callback: function(item, index, collection) {
      cbcallCount++;
      the(this).is(context);
      the(collection[index]).is(item);
      forEachResult.push(item);
      return [item, index, collection];
    },
    callbackWithArgs: function(a1, a2, a3, item, index, collection) {
      cbcallCount++;
      the(this).is(context);
      the(a1).is(arg1);
      the(a2).is(arg2);
      the(a3).is(arg3);
      the(collection[index]).is(item);
      forEachResult.push(item);
      return [item, index, collection];
    },
    filterCallback: function(item, index, collection) {
      cbcallCount++;
      the(this).is(context);
      the(collection[index]).is(item);
      return item==item3;
    },
    filterCallbackWithArgs: function(a1, a2, a3, item, index, collection) {
      cbcallCount++;
      the(this).is(context);
      the(a1).is(arg1);
      the(a2).is(arg2);
      the(a3).is(arg3);
      the(collection[index]).is(item);
      return item==item3;
    },
    doTimesCallback: function(i) {
      the(this).is(context);
      doTimesResult.push(i);
    },
    doTimesCallbackWithArgs: function(a1, a2, a3, i) {
      the(this).is(context);
      the(a1).is(arg1);
      the(a2).is(arg2);
      the(a3).is(arg3);
      doTimesResult.push(i);
    }
  },
  //the following tables where generated by the following code in the firebug console...
  /*
    (function() {
      var collection= [1, 2, 2, 3, 3, 2, 2, 4];
      var result= []
      for (var i= 0; i<=8; i++) {
        row= [i];
        for (j= 1; j<=4; j++) {
          row.push(collection.indexOf(j, i))
        }
        result.push(row);
      } 
      for (var i= -9; i<=-1; i++) {
        row= [i];
        for (j= 1; j<=4; j++) {
          row.push(collection.indexOf(j, i))
        }
        result.push(row);
      }
      result.forEach(function(row) {
        console.log(row);
      });
    })();
  */
  indexOfResults= [
    [0, 0, 1, 3, 7],
    [1, -1, 1, 3, 7],
    [2, -1, 2, 3, 7],
    [3, -1, 5, 3, 7],
    [4, -1, 5, 4, 7],
    [5, -1, 5, -1, 7],
    [6, -1, 6, -1, 7],
    [7, -1, -1, -1, 7],
    [8, -1, -1, -1, -1],
    [-9, 0, 1, 3, 7],
    [-8, 0, 1, 3, 7],
    [-7, -1, 1, 3, 7],
    [-6, -1, 2, 3, 7],
    [-5, -1, 5, 3, 7],
    [-4, -1, 5, 4, 7],
    [-3, -1, 5, -1, 7],
    [-2, -1, 6, -1, 7],
    [-1, -1, -1, -1, 7]
  ],
  lastIndexOfResults= [
    [0, 0, -1, -1, -1],
    [1, 0, 1, -1, -1],
    [2, 0, 2, -1, -1],
    [3, 0, 2, 3, -1],
    [4, 0, 2, 4, -1],
    [5, 0, 5, 4, -1],
    [6, 0, 6, 4, -1],
    [7, 0, 6, 4, 7],
    [8, 0, 6, 4, 7],
    [-9, -1, -1, -1, -1],
    [-8, 0, -1, -1, -1],
    [-7, 0, 1, -1, -1],
    [-6, 0, 2, -1, -1],
    [-5, 0, 2, 3, -1],
    [-4, 0, 2, 4, -1],
    [-3, 0, 5, 4, -1],
    [-2, 0, 6, 4, -1],
    [-1, 0, 6, 4, 7]
  ],
  theTests= [];
theTests.push(
  theFunction("[bd.back]",
    userDemo("[user-demo]", function() {
      var x;
      the(bd.back(x)).is(undefined);
      the(bd.back(0)).is(undefined);
      the(bd.back(false)).is(undefined);
      the(bd.back(null)).is(undefined);
      the(bd.back([])).is(undefined);

      var someObject= {};
      the(bd.back([someObject])).is(someObject);
      the(bd.back([1, someObject])).is(someObject);
      the(bd.back([1, 2, someObject])).is(someObject);
      the(bd.back([1, 2, 3, someObject])).is(someObject);
    })
  ),

  theFunction("[bd.forEach]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      bd.forEach(undefinedCollection, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.forEach(0, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.forEach(false, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.forEach(null, callback);
      the(callCount).is(0);
      bd.forEach(emptyCollection, callback);
      the(callCount).is(0);
    }),
    demo("[collection-with-callback]", function() {
      expected= collection;

      forEachResult= [];
      bd.forEach(collection, callback);
      the(forEachResult).hasValue(expected);

      forEachResult= [];
      bd.forEach(collection, callback, 0);
      the(forEachResult).hasValue(expected);

      forEachResult= [];
      bd.forEach(collection, callbackWithArgs, 0, arg1, arg2, arg3);
      the(forEachResult).hasValue(expected);

      forEachResult= [];
      bd.forEach(collection, "callback", context);
      the(forEachResult).hasValue(expected);

      forEachResult= [];
      bd.forEach(collection, context.callback, context);
      the(forEachResult).hasValue(expected);

      forEachResult= [];
      bd.forEach(collection, "callbackWithArgs", context, arg1, arg2, arg3);
      the(forEachResult).hasValue(expected);

      forEachResult= [];
      bd.forEach(collection, context.callbackWithArgs, context, arg1, arg2, arg3);
      the(forEachResult).hasValue(expected);

      window.forEachResult= forEachResult= [];
      bd.forEach(collection, "window.forEachResult.push([item, index, array]);");
      the(forEachResult).hasValue(mapResult);
      delete window.forEachResult;
    })
  ),

  theFunction("[bd.map]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      bd.map(undefinedCollection, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.map(0, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.map(false, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.map(null, callback);
      the(callCount).is(0);
      bd.map(emptyCollection, callback);
      the(callCount).is(0);
    }),
    demo("[collection-with-callback]", function() {
      the(bd.map(collection, callback)).hasValue(mapResult);
      the(bd.map(collection, callback, 0)).hasValue(mapResult);
      the(bd.map(collection, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(mapResult);
      the(bd.map(collection, "callback", context)).hasValue(mapResult);
      the(bd.map(collection, context.callback, context)).hasValue(mapResult);
      the(bd.map(collection, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(mapResult);
      the(bd.map(collection, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(mapResult);
      the(bd.map(collection, "return [item, index, array];")).hasValue(mapResult);
    })
  ),

  theFunction("[bd.findFirst]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      the(bd.findFirst(undefinedCollection, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.findFirst(0, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.findFirst(false, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.findFirst(null, predicate)).is(-1);
      the(callCount).is(0);
      the(bd.findFirst(emptyCollection, predicate)).is(-1);
      the(callCount).is(0);
    }),
    demo("[collection-find-no-callback]", function() {
      for (var i= 0; i<indexOfResults.length; i++) {
        var startAt= indexOfResults[i][0];
        for (var j= 1; j<=4; j++) {
          target= items[j];
          if (startAt==0) {
            the(bd.findFirst(collection, predicate)).is(indexOfResults[i][j]);
          }
          the(bd.findFirst(collection, predicate, startAt)).is(indexOfResults[i][j]);
        }
      }
    }),
    demo("[collection-find-with-callback]", function() {
      //collection= [item1, item2, item2, item3, item3, item2, item2, itemLast],

      //start missing
      target= item3;
      expected= [item3, 3, collection];
      the(bd.findFirst(collection, predicate, callback)).hasValue(expected);
      the(bd.findFirst(collection, predicate, callback, 0)).hasValue(expected);
      the(bd.findFirst(collection, predicate, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findFirst(collection, predicate, "callback", context)).hasValue(expected);
      the(bd.findFirst(collection, predicate, context.callback, context)).hasValue(expected);
      the(bd.findFirst(collection, predicate, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findFirst(collection, predicate, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findFirst(collection, predicate, "return [item, index, array];")).hasValue(expected);

      //with start 
      target= item2;
      expected= [item2, 5, collection];
      the(bd.findFirst(collection, predicate, 3, callback)).hasValue(expected);
      the(bd.findFirst(collection, predicate, 3, callback, 0)).hasValue(expected);
      the(bd.findFirst(collection, predicate, 3, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findFirst(collection, predicate, 3, "callback", context)).hasValue(expected);
      the(bd.findFirst(collection, predicate, 3, context.callback, context)).hasValue(expected);
      the(bd.findFirst(collection, predicate, 3, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findFirst(collection, predicate, 3, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);      
      the(bd.findFirst(collection, predicate, 3, "return [item, index, array];")).hasValue(expected);
    })
  ),

  theFunction("[bd.some]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      the(bd.some(undefinedCollection, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.some(0, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.some(false, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.some(null, predicate)).is(false);
      the(callCount).is(0);
      the(bd.some(emptyCollection, predicate)).is(false);
      the(callCount).is(0);
    }),
    demo("[collection-with-predicate]", function() {
      //not existing item
      window.rawld= target= item0;
      the(bd.some(collection, predicate)).is(false);
      the(bd.some(collection, predicate, 0)).is(false);
      the(bd.some(collection, predicateWithArgs, 0, arg1, arg2, arg3)).is(false);
      the(bd.some(collection, "predicate", context)).is(false);
      the(bd.some(collection, context.predicate, context)).is(false);
      the(bd.some(collection, "predicateWithArgs", context, arg1, arg2, arg3)).is(false);
      the(bd.some(collection, context.predicateWithArgs, context, arg1, arg2, arg3)).is(false);
      the(bd.some(collection, "return item===window.rawld")).is(false);

      //first item
      window.rawld= target= item1;
      the(bd.some(collection, predicate)).is(true);
      the(bd.some(collection, predicate, 0)).is(true);
      the(bd.some(collection, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, "predicate", context)).is(true);
      the(bd.some(collection, context.predicate, context)).is(true);
      the(bd.some(collection, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, "return item===window.rawld")).is(true);

      //middle item
      window.rawld= target= item3;
      the(bd.some(collection, predicate)).is(true);
      the(bd.some(collection, predicate, 0)).is(true);
      the(bd.some(collection, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, "predicate", context)).is(true);
      the(bd.some(collection, context.predicate, context)).is(true);
      the(bd.some(collection, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, "return item===window.rawld")).is(true);

      //last item
      window.rawld= target= itemLast;
      the(bd.some(collection, predicate)).is(true);
      the(bd.some(collection, predicate, 0)).is(true);
      the(bd.some(collection, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, "predicate", context)).is(true);
      the(bd.some(collection, context.predicate, context)).is(true);
      the(bd.some(collection, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.some(collection, "return item===window.rawld")).is(true);
    })
  ),

  theFunction("[bd.every]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      the(bd.every(undefinedCollection, predicate)).is(true);
      the(callCount).is(0);
      callCount= 0;
      the(bd.every(0, predicate)).is(true);
      the(callCount).is(0);
      callCount= 0;
      the(bd.every(false, predicate)).is(true);
      the(callCount).is(0);
      callCount= 0;
      the(bd.every(null, predicate)).is(true);
      the(callCount).is(0);
      the(bd.every(emptyCollection, predicate)).is(true);
      the(callCount).is(0);
    }),
    demo("[collection-with-predicate]", function() {
      //not existing item
      window.rawld= target= item3;
      the(bd.every(collection, predicate)).is(false);
      the(bd.every(collection, predicate, 0)).is(false);
      the(bd.every(collection, predicateWithArgs, 0, arg1, arg2, arg3)).is(false);
      the(bd.every(collection, "predicate", context)).is(false);
      the(bd.every(collection, context.predicate, context)).is(false);
      the(bd.every(collection, "predicateWithArgs", context, arg1, arg2, arg3)).is(false);
      the(bd.every(collection, context.predicateWithArgs, context, arg1, arg2, arg3)).is(false);
      the(bd.every(collection, "return item===window.rawld")).is(false);

      //first item
      window.rawld= target= item2;
      the(bd.every(everyCollection, predicate)).is(true);
      the(bd.every(everyCollection, predicate, 0)).is(true);
      the(bd.every(everyCollection, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.every(everyCollection, "predicate", context)).is(true);
      the(bd.every(everyCollection, context.predicate, context)).is(true);
      the(bd.every(everyCollection, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.every(everyCollection, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.every(everyCollection, "return item===window.rawld")).is(true);
    })
  ),

  theFunction("[bd.indexOf]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      the(bd.indexOf(undefinedCollection, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.indexOf(0, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.indexOf(false, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.indexOf(null, predicate)).is(-1);
      the(callCount).is(0);
      the(bd.indexOf(emptyCollection, predicate)).is(-1);
      the(callCount).is(0);
    }),
    demo("[collection-find-no-callback]", function() {
      for (var i= 0; i<indexOfResults.length; i++) {
        var startAt= indexOfResults[i][0];
        for (var j= 1; j<=4; j++) {
          if (startAt==0) {
            the(bd.indexOf(collection, items[j])).is(indexOfResults[i][j]);
          }
          the(bd.indexOf(collection, items[j], startAt)).is(indexOfResults[i][j]);
        }
      }
    }),
    demo("[collection-find-with-callback]", function() {
      //collection= [item1, item2, item2, item3, item3, item2, item2, itemLast],

      //start missing
      expected= [item3, 3, collection];
      the(bd.indexOf(collection, item3, callback)).hasValue(expected);
      the(bd.indexOf(collection, item3, callback, 0)).hasValue(expected);
      the(bd.indexOf(collection, item3, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(expected);
      the(bd.indexOf(collection, item3, "callback", context)).hasValue(expected);
      the(bd.indexOf(collection, item3, context.callback, context)).hasValue(expected);
      the(bd.indexOf(collection, item3, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.indexOf(collection, item3, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.indexOf(collection, item3, "return [item, index, array];")).hasValue(expected);

      //with start 
      expected= [item2, 5, collection];
      the(bd.indexOf(collection, item2, 3, callback)).hasValue(expected);
      the(bd.indexOf(collection, item2, 3, callback, 0)).hasValue(expected);
      the(bd.indexOf(collection, item2, 3, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(expected);
      the(bd.indexOf(collection, item2, 3, "callback", context)).hasValue(expected);
      the(bd.indexOf(collection, item2, 3, context.callback, context)).hasValue(expected);
      the(bd.indexOf(collection, item2, 3, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.indexOf(collection, item2, 3, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);      
      the(bd.indexOf(collection, item2, 3, "return [item, index, array];")).hasValue(expected);
    })
  ),

  theFunction("[bd.lastIndexOf]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      the(bd.lastIndexOf(undefinedCollection, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.lastIndexOf(0, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.lastIndexOf(false, predicate)).is(-1);
      the(callCount).is(0);
      callCount= 0;
      the(bd.lastIndexOf(null, predicate)).is(-1);
      the(callCount).is(0);
      the(bd.lastIndexOf(emptyCollection, predicate)).is(-1);
      the(callCount).is(0);
    }),
    demo("[collection-find-no-callback]", function() {
      for (var i= 0; i<lastIndexOfResults.length; i++) {
        var startAt= lastIndexOfResults[i][0];
        for (var j= 1; j<=4; j++) {
          if (startAt==7) {
            the(bd.lastIndexOf(collection, items[j])).is(lastIndexOfResults[i][j]);
          }
          the(bd.lastIndexOf(collection, items[j], startAt)).is(lastIndexOfResults[i][j]);
        }
      }
    }),
    demo("[collection-find-with-callback]", function() {
      //start missing
      expected= [item3, 4, collection];
      the(bd.lastIndexOf(collection, item3, callback)).hasValue(expected);
      the(bd.lastIndexOf(collection, item3, callback, 0)).hasValue(expected);
      the(bd.lastIndexOf(collection, item3, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(expected);
      the(bd.lastIndexOf(collection, item3, "callback", context)).hasValue(expected);
      the(bd.lastIndexOf(collection, item3, context.callback, context)).hasValue(expected);
      the(bd.lastIndexOf(collection, item3, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.lastIndexOf(collection, item3, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.lastIndexOf(collection, item3, "return [item, index, array];")).hasValue(expected);

      //with start 
      expected= [item2, 2, collection];
      the(bd.lastIndexOf(collection, item2, 3, callback)).hasValue(expected);
      the(bd.lastIndexOf(collection, item2, 3, callback, 0)).hasValue(expected);
      the(bd.lastIndexOf(collection, item2, 3, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(expected);
      the(bd.lastIndexOf(collection, item2, 3, "callback", context)).hasValue(expected);
      the(bd.lastIndexOf(collection, item2, 3, context.callback, context)).hasValue(expected);
      the(bd.lastIndexOf(collection, item2, 3, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.lastIndexOf(collection, item2, 3, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);      
      the(bd.lastIndexOf(collection, item2, 3, "return [item, index, array];")).hasValue(expected);
    })
  ),

  theFunction("[bd.filter]",
    demo("[collection-falsy]", function() {
      callCount= 0;
      bd.filter(undefinedCollection, filterCallback);
      the(callCount).is(0);
      callCount= 0;
      bd.filter(0, filterCallback);
      the(callCount).is(0);
      callCount= 0;
      bd.filter(false, filterCallback);
      the(callCount).is(0);
      callCount= 0;
      bd.filter(null, filterCallback);
      the(callCount).is(0);
      bd.filter(emptyCollection, filterCallback);
      the(callCount).is(0);
    }),
    demo("[collection-with-callback]", function() {
      the(bd.filter(collection, filterCallback)).hasValue(filterResult);
      the(bd.filter(collection, filterCallback, 0)).hasValue(filterResult);
      the(bd.filter(collection, filterCallbackWithArgs, 0, arg1, arg2, arg3)).hasValue(filterResult);
      the(bd.filter(collection, "filterCallback", context)).hasValue(filterResult);
      the(bd.filter(collection, context.filterCallback, context)).hasValue(filterResult);
      the(bd.filter(collection, "filterCallbackWithArgs", context, arg1, arg2, arg3)).hasValue(filterResult);
      the(bd.filter(collection, context.filterCallbackWithArgs, context, arg1, arg2, arg3)).hasValue(filterResult);
      window.forEachResult= forEachResult= [];
      the(bd.filter(collection, "window.forEachResult.push([item, index, array]); return false;")).hasValue([]);
      the(forEachResult).hasValue(mapResult);
      delete window.forEachResult;
    })
  )
);

module("The module bd/collections",
  describe("[built-in] Using built-in collection functions (if available).", theTests),
  describe("[no-built-in] Not using build-in collection functions (even if available)",
    scaffold(each, (function() {
      //by causing bd.hasNative to return false, forEach will think that collection does not have a forEach function even if it
      //actually does. This is somewhat fragile in that it assumes that bd.hasNative won't be needed during this test.
      var hold;
      return [
        function() {
          hold= bd.hasNative;
          bd.hasNative= function(){ return false; };
        },
        function() {
          bd.hasNative= hold;
        }
      ];
    })()),
    theTests
  ),
  theFunction("[bd.doTimes]", demo("[*]", function() {
      var
        range= 5,
        expected= [0, 1, 2, 3, 4];
      doTimesResult= [];
      bd.doTimes(range, doTimesCallback);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, doTimesCallback, 0);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, doTimesCallbackWithArgs, 0, arg1, arg2, arg3);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, "doTimesCallback", context);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, context.doTimesCallback, context);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, "doTimesCallbackWithArgs", context, arg1, arg2, arg3);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, context.doTimesCallbackWithArgs, context, arg1, arg2, arg3);
      the(doTimesResult).hasValue(expected);

      range= [-3, 3],
      expected= [-3, -2, -1, 0, 1, 2];
      doTimesResult= [];
      bd.doTimes(range, doTimesCallback);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, doTimesCallback, 0);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, doTimesCallbackWithArgs, 0, arg1, arg2, arg3);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, "doTimesCallback", context);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, context.doTimesCallback, context);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, "doTimesCallbackWithArgs", context, arg1, arg2, arg3);
      the(doTimesResult).hasValue(expected);

      doTimesResult= [];
      bd.doTimes(range, context.doTimesCallbackWithArgs, context, arg1, arg2, arg3);
      the(doTimesResult).hasValue(expected);
  })),

  theFunction("[bd.binarySearch]", demo("[*]", function() {
    var collection= [1, 2, 3, 4, 5];
    for (var i= 1; i<=5; i++) {
      the(bd.binarySearch(collection, function(test) { return test - i; })).is(i-1);
    }
    the(bd.binarySearch(collection, function(test) { return test - 0; })).is(bd.notFound);
    the(bd.binarySearch(collection, function(test) { return test - 6; })).is(bd.notFound);
  })),

  theFunction("[bd.lengthHash]", demo("[*]", function() {
    the(bd.lengthHash({})).is(0);
    the(bd.lengthHash({a:1})).is(1);
    the(bd.lengthHash({a:1, b:2})).is(2);
    the(bd.lengthHash({a:1, b:2, c:3})).is(3);
  })),

  theFunction("[bd.isEmptyHash]", demo("[*]", function() {
    var x;
    the(bd.isEmptyHash(x)).is(true);
    the(bd.isEmptyHash(0)).is(true);
    the(bd.isEmptyHash(false)).is(true);
    the(bd.isEmptyHash(null)).is(true);
    the(bd.isEmptyHash({})).is(true);
    the(bd.isEmptyHash({a:1})).is(false);
    the(bd.isEmptyHash({a:1, b:2})).is(false);
    the(bd.isEmptyHash({a:1, b:2, c:3})).is(false);
  })),


  theFunction("[bd.forEachHash]",
    demo("[hash-falsy]", function() {
      callCount= 0;
      bd.forEachHash(undefinedCollection, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.forEachHash(0, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.forEachHash(false, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.forEachHash(null, callback);
      the(callCount).is(0);
      bd.forEachHash({}, callback);
      the(callCount).is(0);
    }),
    demo("[hash-with-callback]", function() {
      forEachResult= [];
      bd.forEachHash(hash, callback);
      the(forEachResult).hasValue(forEachHashResult);

      forEachResult= [];
      bd.forEachHash(hash, callback, 0);
      the(forEachResult).hasValue(forEachHashResult);

      forEachResult= [];
      bd.forEachHash(hash, callbackWithArgs, 0, arg1, arg2, arg3);
      the(forEachResult).hasValue(forEachHashResult);

      forEachResult= [];
      bd.forEachHash(hash, "callback", context);
      the(forEachResult).hasValue(forEachHashResult);

      forEachResult= [];
      bd.forEachHash(hash, context.callback, context);
      the(forEachResult).hasValue(forEachHashResult);

      forEachResult= [];
      bd.forEachHash(hash, "callbackWithArgs", context, arg1, arg2, arg3);
      the(forEachResult).hasValue(forEachHashResult);

      forEachResult= [];
      bd.forEachHash(hash, context.callbackWithArgs, context, arg1, arg2, arg3);
      the(forEachResult).hasValue(forEachHashResult);

      window.forEachResult= forEachResult= [];
      bd.forEachHash(hash, "hash[key]===item && window.forEachResult.push(item);");
      the(forEachResult).hasValue(forEachHashResult);
      delete window.forEachResult;
    })
  ),

  theFunction("[bd.mapHash]",
    demo("[hash-falsy]", function() {
      callCount= 0;
      bd.mapHash(undefinedCollection, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.mapHash(0, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.mapHash(false, callback);
      the(callCount).is(0);
      callCount= 0;
      bd.mapHash(null, callback);
      the(callCount).is(0);
      bd.mapHash({}, callback);
      the(callCount).is(0);
    }),
    demo("[hash-with-callback]", function() {
      the(bd.mapHash(hash, callback)).hasValue(mapHashResult);
      the(bd.mapHash(hash, callback, 0)).hasValue(mapHashResult);
      the(bd.mapHash(hash, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(mapHashResult);
      the(bd.mapHash(hash, "callback", context)).hasValue(mapHashResult);
      the(bd.mapHash(hash, context.callback, context)).hasValue(mapHashResult);
      the(bd.mapHash(hash, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(mapHashResult);
      the(bd.mapHash(hash, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(mapHashResult);
      the(bd.mapHash(hash, "return [item, key, hash];")).hasValue(mapHashResult);
    })
  ),

  theFunction("[bd.findHash]",
    demo("[hash-falsy]", function() {
      callCount= 0;
      the(bd.findHash(undefinedCollection, predicate)).is(bd.notFound);
      the(callCount).is(0);
      callCount= 0;
      the(bd.findHash(0, predicate)).is(bd.notFound);
      the(callCount).is(0);
      callCount= 0;
      the(bd.findHash(false, predicate)).is(bd.notFound);
      the(callCount).is(0);
      callCount= 0;
      the(bd.findHash(null, predicate)).is(bd.notFound);
      the(callCount).is(0);
      the(bd.findHash({}, predicate)).is(bd.notFound);
      the(callCount).is(0);
    }),
    demo("[hash-find-no-callback]", function() {
      //hash= {a:item1, b:item2, c:item2, d:item3},
      the(bd.findHash(hash, function(item, key, hash) {
        the(hash[key]).is(item);
        return item===item1;
      })).is("a");
      var result= bd.findHash(hash, function(item, key, hash) {
        the(hash[key]).is(item);
        return item===item2;
      });
      the(result=="b" || result=="c").is(true);
      the(bd.findHash(hash, function(item, key, hash) {
        the(hash[key]).is(item);
        return item===item3;
      })).is("d");
    }),
    demo("[hash-find-with-callback]", function() {
      target= item3;
      expected= [item3, "d", hash];
      the(bd.findHash(hash, predicate, callback)).hasValue(expected);
      the(bd.findHash(hash, predicate, callback, 0)).hasValue(expected);
      the(bd.findHash(hash, predicate, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findHash(hash, predicate, "callback", context)).hasValue(expected);
      the(bd.findHash(hash, predicate, context.callback, context)).hasValue(expected);
      the(bd.findHash(hash, predicate, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findHash(hash, predicate, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.findHash(hash, predicate, "return [item, key, hash];")).hasValue(expected);
    })
  ),

  theFunction("[bd.someHash]",
    demo("[hash-falsy]", function() {
      callCount= 0;
      the(bd.someHash(undefinedCollection, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.someHash(0, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.someHash(false, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.someHash(null, predicate)).is(false);
      the(callCount).is(0);
      the(bd.someHash({}, predicate)).is(false);
      the(callCount).is(0);
    }),
    demo("[hash-with-predicate]", function() {
      //not existing item
      window.rawld= target= item0;
      the(bd.someHash(hash, predicate)).is(false);
      the(bd.someHash(hash, predicate, 0)).is(false);
      the(bd.someHash(hash, predicateWithArgs, 0, arg1, arg2, arg3)).is(false);
      the(bd.someHash(hash, "predicate", context)).is(false);
      the(bd.someHash(hash, context.predicate, context)).is(false);
      the(bd.someHash(hash, "predicateWithArgs", context, arg1, arg2, arg3)).is(false);
      the(bd.someHash(hash, context.predicateWithArgs, context, arg1, arg2, arg3)).is(false);
      the(bd.someHash(hash, "return item===window.rawld")).is(false);

      //first item
      window.rawld= target= item1;
      the(bd.someHash(hash, predicate)).is(true);
      the(bd.someHash(hash, predicate, 0)).is(true);
      the(bd.someHash(hash, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, "predicate", context)).is(true);
      the(bd.someHash(hash, context.predicate, context)).is(true);
      the(bd.someHash(hash, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, "return item===window.rawld")).is(true);

      //multiple item
      window.rawld= target= item2;
      the(bd.someHash(hash, predicate)).is(true);
      the(bd.someHash(hash, predicate, 0)).is(true);
      the(bd.someHash(hash, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, "predicate", context)).is(true);
      the(bd.someHash(hash, context.predicate, context)).is(true);
      the(bd.someHash(hash, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, "return item===window.rawld")).is(true);

      //last item
      window.rawld= target= item3;
      the(bd.someHash(hash, predicate)).is(true);
      the(bd.someHash(hash, predicate, 0)).is(true);
      the(bd.someHash(hash, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, "predicate", context)).is(true);
      the(bd.someHash(hash, context.predicate, context)).is(true);
      the(bd.someHash(hash, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.someHash(hash, "return item===window.rawld")).is(true);
    })
  ),

  theFunction("[bd.everyHash]",
    demo("[hash-falsy]", function() {
      callCount= 0;
      the(bd.everyHash(undefinedCollection, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.everyHash(0, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.everyHash(false, predicate)).is(false);
      the(callCount).is(0);
      callCount= 0;
      the(bd.everyHash(null, predicate)).is(false);
      the(callCount).is(0);
      the(bd.everyHash({}, predicate)).is(true);
      the(callCount).is(0);
    }),
    demo("[hash-with-predicate]", function() {
      //not existing item
      window.rawld= target= item0;
      the(bd.everyHash(hash, predicate)).is(false);
      the(bd.everyHash(hash, predicate, 0)).is(false);
      the(bd.everyHash(hash, predicateWithArgs, 0, arg1, arg2, arg3)).is(false);
      the(bd.everyHash(hash, "predicate", context)).is(false);
      the(bd.everyHash(hash, context.predicate, context)).is(false);
      the(bd.everyHash(hash, "predicateWithArgs", context, arg1, arg2, arg3)).is(false);
      the(bd.everyHash(hash, context.predicateWithArgs, context, arg1, arg2, arg3)).is(false);
      the(bd.everyHash(hash, "return item===window.rawld")).is(false);

      //first item
      var everyHash= {a:item2, b:item2};
      window.rawld= target= item2;
      the(bd.everyHash(everyHash, predicate)).is(true);
      the(bd.everyHash(everyHash, predicate, 0)).is(true);
      the(bd.everyHash(everyHash, predicateWithArgs, 0, arg1, arg2, arg3)).is(true);
      the(bd.everyHash(everyHash, "predicate", context)).is(true);
      the(bd.everyHash(everyHash, context.predicate, context)).is(true);
      the(bd.everyHash(everyHash, "predicateWithArgs", context, arg1, arg2, arg3)).is(true);
      the(bd.everyHash(everyHash, context.predicateWithArgs, context, arg1, arg2, arg3)).is(true);
      the(bd.everyHash(everyHash, "return item===window.rawld")).is(true);
    })
  ),

  theFunction("[bd.keysOf]",
    demo("[hash-falsy]", function() {
      callCount= 0;
      the(bd.keysOf(undefinedCollection, predicate)).hasValue([]);
      the(callCount).is(0);
      callCount= 0;
      the(bd.keysOf(0, predicate)).hasValue([]);
      the(callCount).is(0);
      callCount= 0;
      the(bd.keysOf(false, predicate)).hasValue([]);
      the(callCount).is(0);
      callCount= 0;
      the(bd.keysOf(null, predicate)).hasValue([]);
      the(callCount).is(0);
      the(bd.keysOf({}, predicate)).hasValue([]);
      the(callCount).is(0);
    }),
    demo("[hash-find-no-callback]", function() {
      the(bd.keysOf(hash, item1)).hasValue(["a"]);
      the(bd.keysOf(hash, item2)).hasValue(["b", "c"]);
      the(bd.keysOf(hash, item3)).hasValue(["d"]);
    }),
    demo("[hash-find-with-callback]", function() {
      forEachResult= [];
      the(bd.keysOf(hash, item3, callback)).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);

      forEachResult= [];
      the(bd.keysOf(hash, item3, callback, 0)).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);

      forEachResult= [];
      the(bd.keysOf(hash, item3, callbackWithArgs, 0, arg1, arg2, arg3)).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);

      forEachResult= [];
      the(bd.keysOf(hash, item3, "callback", context)).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);

      forEachResult= [];
      the(bd.keysOf(hash, item3, context.callback, context)).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);

      forEachResult= [];
      the(bd.keysOf(hash, item3, "callbackWithArgs", context, arg1, arg2, arg3)).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);

      forEachResult= [];
      the(bd.keysOf(hash, item3, context.callbackWithArgs, context, arg1, arg2, arg3)).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);

      window.forEachResult= forEachResult= [];
      the(bd.keysOf(hash, item3, "window.forEachResult.push(hash[key]===item && item);")).hasValue(["d"]);
      the(forEachResult).hasValue([item3]);
    })
  ),

  theFunction("[bd.filterHash]",
    demo("[hash-falsy]", function() {
      callCount= 0;
      the(bd.filterHash(undefinedCollection, filterCallback)).hasValue({});
      the(callCount).is(0);
      callCount= 0;
      the(bd.filterHash(0, filterCallback)).hasValue({});
      the(callCount).is(0);
      callCount= 0;
      the(bd.filterHash(false, filterCallback)).hasValue({});
      the(callCount).is(0);
      callCount= 0;
      the(bd.filterHash(null, filterCallback)).hasValue({});
      the(callCount).is(0);
      the(bd.filterHash({}, filterCallback)).hasValue({});
      the(callCount).is(0);
    }),
    demo("[hash-with-callback]", function() {
      var expected= {d:item3};
      the(bd.filterHash(hash, filterCallback)).hasValue(expected);
      the(bd.filterHash(hash, "filterCallback", context)).hasValue(expected);
      the(bd.filterHash(hash, context.filterCallback, context)).hasValue(expected);
      the(bd.filterHash(hash, "filterCallbackWithArgs", context, arg1, arg2, arg3)).hasValue(expected);
      the(bd.filterHash(hash, context.filterCallbackWithArgs, context, arg1, arg2, arg3)).hasValue(expected);
      window.filterHashTarget= item3;
      the(bd.filterHash(hash, "return hash[key]===item && window.filterHashTarget==item;")).hasValue(expected);
      delete window.filterHashTarget;
    })
  )
);

})();
// Copyright (c) 2000-2009, ALTOVISO, Inc. (www.altoviso.com). Use, modification, and distribution subject to terms of license.
